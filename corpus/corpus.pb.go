// Code generated by protoc-gen-go. DO NOT EDIT.
// source: corpus.proto

package corpus

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MergeUserThemeRequest struct {
	UIdFrom              int64    `protobuf:"varint,1,opt,name=UIdFrom,proto3" json:"UIdFrom,omitempty"`
	UIdTo                int64    `protobuf:"varint,2,opt,name=UIdTo,proto3" json:"UIdTo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeUserThemeRequest) Reset()         { *m = MergeUserThemeRequest{} }
func (m *MergeUserThemeRequest) String() string { return proto.CompactTextString(m) }
func (*MergeUserThemeRequest) ProtoMessage()    {}
func (*MergeUserThemeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf6549d1d86e2f7, []int{0}
}

func (m *MergeUserThemeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeUserThemeRequest.Unmarshal(m, b)
}
func (m *MergeUserThemeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeUserThemeRequest.Marshal(b, m, deterministic)
}
func (m *MergeUserThemeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeUserThemeRequest.Merge(m, src)
}
func (m *MergeUserThemeRequest) XXX_Size() int {
	return xxx_messageInfo_MergeUserThemeRequest.Size(m)
}
func (m *MergeUserThemeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeUserThemeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MergeUserThemeRequest proto.InternalMessageInfo

func (m *MergeUserThemeRequest) GetUIdFrom() int64 {
	if m != nil {
		return m.UIdFrom
	}
	return 0
}

func (m *MergeUserThemeRequest) GetUIdTo() int64 {
	if m != nil {
		return m.UIdTo
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf6549d1d86e2f7, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MergeUserThemeRequest)(nil), "corpus.MergeUserThemeRequest")
	proto.RegisterType((*Empty)(nil), "corpus.Empty")
}

func init() { proto.RegisterFile("corpus.proto", fileDescriptor_0cf6549d1d86e2f7) }

var fileDescriptor_0cf6549d1d86e2f7 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0x2f, 0x2a,
	0x28, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xdc, 0xb9, 0x44,
	0x7d, 0x53, 0x8b, 0xd2, 0x53, 0x43, 0x8b, 0x53, 0x8b, 0x42, 0x32, 0x52, 0x73, 0x53, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x43, 0x3d, 0x53, 0xdc, 0x8a, 0xf2, 0x73,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x60, 0x5c, 0x21, 0x11, 0x2e, 0xd6, 0x50, 0xcf, 0x94,
	0x90, 0x7c, 0x09, 0x26, 0xb0, 0x38, 0x84, 0xa3, 0xc4, 0xce, 0xc5, 0xea, 0x9a, 0x5b, 0x50, 0x52,
	0x69, 0xe4, 0xca, 0xc5, 0x1c, 0x54, 0x90, 0x2c, 0x64, 0xc7, 0xc5, 0x87, 0x6a, 0xb0, 0x90, 0xac,
	0x1e, 0xd4, 0x05, 0x58, 0x2d, 0x94, 0xe2, 0x85, 0x49, 0x83, 0x8d, 0x49, 0x62, 0x03, 0xbb, 0xd3,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xad, 0xfe, 0x76, 0x05, 0xb7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	MergeUserTheme(ctx context.Context, in *MergeUserThemeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) MergeUserTheme(ctx context.Context, in *MergeUserThemeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/corpus.Rpc/MergeUserTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	MergeUserTheme(context.Context, *MergeUserThemeRequest) (*Empty, error)
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) MergeUserTheme(ctx context.Context, req *MergeUserThemeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeUserTheme not implemented")
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_MergeUserTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeUserThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).MergeUserTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corpus.Rpc/MergeUserTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).MergeUserTheme(ctx, req.(*MergeUserThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corpus.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeUserTheme",
			Handler:    _Rpc_MergeUserTheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "corpus.proto",
}
